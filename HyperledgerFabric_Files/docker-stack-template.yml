
version: '3'

networks:
  byfn:
    # If network is created with deplyment, Chaincode container cannot connect to network
    # as the created network name is '<STACK NAME>_hyperledger-ov'.
    # But chaincode container will attempt to connect 'hyperledger-ov' network
    external:
      name: byfn

services:
  ca_org1_example_com:
    image: hyperledger/fabric-ca:x86_64-1.0.4
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      #- FABRIC_CA_SERVER_CA_NAME=ca1.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA1_PRIVATE_KEY
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA1_PRIVATE_KEY
    ports:
      - "7054:7054"
      
    expose:
      - "7054"
    #command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/be9fc7d28466a86f14d5e60d2bb7fbd234763273518c7502b58bcbbc23d837d4_sk -b admin:adminpw -d'
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      byfn:
        aliases:
          - ca_peerOrg1
    deploy:
      placement:
        constraints: [node.hostname == worker1]


  ca_org2_example_com:
    image: hyperledger/fabric-ca:x86_64-1.0.4
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      #- FABRIC_CA_SERVER_CA_NAME=ca2.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA2_PRIVATE_KEY
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA2_PRIVATE_KEY
    ports:
      - "8054:7054"
    
    expose:
      - "8054"
    #command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/be9fc7d28466a86f14d5e60d2bb7fbd234763273518c7502b58bcbbc23d837d4_sk -b admin:adminpw -d'
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
      - /var/run/docker.sock:/var/run/docker.sock
 
    networks:
      byfn:
        aliases:
          - ca_peerOrg2
    deploy:
      placement:
        constraints: [node.hostname == worker1]

  orderer_example_com:
    image: hyperledger/fabric-orderer:x86_64-1.0.4
    environment:
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=byfn
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/crypto/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/crypto/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/crypto/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/crypto/orderer/tls/ca.crt, /etc/hyperledger/crypto/peerOrg1/tls/ca.crt, /etc/hyperledger/crypto/peerOrg2/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    
    ports:
      - 7050:7050
    
    expose:
      - "7050"
    volumes:
      - ./channel-artifacts/:/etc/hyperledger/configtx
      - ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/crypto/orderer
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/crypto/peerOrg1
      - ./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/crypto/peerOrg2
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      byfn:
        aliases:
          - orderer.example.com
    deploy:
      placement:
        constraints: [node.hostname == worker1]

  peer0_org1_example_com:
    image: hyperledger/fabric-peer:x86_64-1.0.4
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=byfn
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
      # CouchDB
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    networks:
      byfn:
        aliases:
          - peer0.org1.example.com
    ports:
      - 7051:7051
      - 7053:7053
    expose:
      - "7051"
      - "7053"
    volumes:
      - ./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/:/etc/hyperledger/crypto/peer
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/run/:/host/var/run/
    depends_on:
      - orderer_example_com
      - couchdb0
    deploy:
      placement:
        constraints: [node.hostname == fabric]

  #added by nikos second peer beloging to org2
  peer0_org2_example_com:
    image: hyperledger/fabric-peer:x86_64-1.0.4
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=byfn
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/crypto/peer/msp
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/crypto/peer/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/crypto/peer/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/crypto/peer/tls/ca.crt
      # CouchDB
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    networks:
      byfn:
        aliases:
          - peer0.org2.example.com
    ports:
      - 8051:7051
      - 8053:7053
    expose:
      - "8051"
      - "8053"
    volumes:
      - ./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/:/etc/hyperledger/crypto/peer
      - /var/run/:/host/var/run/
    depends_on:
      - orderer_example_com
      - couchdb1

    deploy:
      placement:
        constraints: [node.hostname == worker1]


  couchdb0:
    image: hyperledger/fabric-couchdb:x86_64-1.0.4
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - "5984:5984"
    expose:
      - "5984"
    #networks:
    #  - dipsup
    #networks:
    #  - basic
    networks:
      byfn:
        aliases:
          - couchdb0
    # deploy:
      # placement:
        # constraints: [node.hostname == fabric]

  couchdb1:
 
    image: hyperledger/fabric-couchdb:x86_64-1.0.4
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - "6984:5984"
    expose:
      - "6984"


    #networks:
    #  - dipsup
    #networks:
    #  - basic
    networks:
      byfn:
        aliases:
          - couchdb1
          
          


  cli:
    image: hyperledger/fabric-tools:x86_64-1.0.4
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    
    command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME} ${DELAY}; sleep $TIMEOUT'
    

    volumes:
      - /var/run/:/host/var/run/
      #- ./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/crypto/orderer
      - $HOME/fabric-samples/chaincode/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
      - ./crypto-config/:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto
     # - ./crypto-config/peerOrganizations/org1.example.com/users/:/etc/hyperledger/crypto/org1/users
     # - ./crypto-config/peerOrganizations/org2.example.com/:/etc/hyperledger/crypto/org2/peer
      - $HOME/fabric-samples/first-network/scripts/:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
      - $HOME/fabric-samples/first-network/channel-artifacts/:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
      #- /var/run/docker.sock:/var/run/docker.sock
    
    deploy:
      placement:
        constraints: [node.hostname == fabric]
        
    depends_on:
      - orderer_example_com
      - peer0_org1_example_com
      - peer0_org2_example_com
      
    networks:
      - byfn          


          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
  # # DipSup login microservice
  # loginWebApp:
  # #container_name: loginWebApp
# #    image: endimion13/eidas-gr-loginwebapp:1.6
    # image: endimion13/eidas-gr-loginwebapp:3
    # #expose:
    # #  - 8090
    # ports:
      # - 8080:8090
      # - 8090:8090
    # environment:
      # - EIDAS_PROPERTIES=CurrentFamilyName,CurrentGivenName,DateOfBirth,PersonIdentifier
      # - SP_FAIL_PAGE=https://www.google.com
      # - SP_SUCCESS_PAGE=http://138.68.103.237/loginSuccess
      # - SP_BACKEND=https://138.68.103.237
      # - SP_METADATA_URL=http://138.68.103.237:8090/metadata
      # - SP_RETURN_URL=http://138.68.103.237:8090/eidasResponse
      # - SP_LOGO=http://trc.aiest.org/wp-content/uploads/2013/04/university-of-the-aegean.png
      # - SP_CONFIG_REPOSITORY=/configEidas/
    # volumes:
      # - /configEidas:/configEidas
      # - /keystore:/keystore
    # networks:
      # byfn:
        # aliases:
          # - loginWeb

